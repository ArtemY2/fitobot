import os
import logging
import sqlite3
import json
from datetime import datetime, date
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv('TELEGRAM_TOKEN', '7806769211:AAFWCXODWkKGeB1ccFhBf9H4gDNgo43df6E')  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
DB_PATH = 'fitobob.db'

# –°—É—Ç–æ—á–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /targets)
DEFAULT_TARGETS = {
    'calories': 1800,
    'protein': 120,
    'fat': 50,
    'carbs': 100
}

# –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ 100–≥ (—Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
NUTRITION_DB = {
    '—è–π—Ü–æ':     {'calories': 155, 'protein': 13, 'fat': 11, 'carbs': 1.1},  # 100 –≥ –≤–∞—Ä—ë–Ω—ã—Ö —è–∏—Ü
    '—Ä–∏—Å':      {'calories': 130, 'protein': 2.7, 'fat': 0.3, 'carbs': 28},
    '–∫—É—Ä–∏—Ü–∞':   {'calories': 165, 'protein': 31, 'fat': 3.6, 'carbs': 0},
    '–≥–æ–≤—è–¥–∏–Ω–∞': {'calories': 250, 'protein': 26, 'fat': 17, 'carbs': 0},
    '—è–±–ª–æ–∫–æ':   {'calories': 52, 'protein': 0.3, 'fat': 0.2, 'carbs': 14},
    '–±–∞–Ω–∞–Ω':    {'calories': 89, 'protein': 1.1, 'fat': 0.3, 'carbs': 23},
    '–±—Ä–æ–∫–∫–æ–ª–∏': {'calories': 55, 'protein': 3.7, 'fat': 0.6, 'carbs': 11},
    '–ª–æ—Å–æ—Å—å':   {'calories': 208, 'protein': 20, 'fat': 13, 'carbs': 0},
    '–º–∏–Ω–¥–∞–ª—å':  {'calories': 579, 'protein': 21, 'fat': 50, 'carbs': 22},
    '–ø—Ä–æ—Ç–µ–∏–Ω':  {'calories': 110, 'protein': 20, 'fat': 1, 'carbs': 3},
    '–ø–∞–Ω–µ–ª—å':   {'calories': 350, 'protein': 5, 'fat': 15, 'carbs': 50},  # –ø—Ä–∏–º–µ—Ä —Ç–æ—Ä—Ç–∞
    '–∞—Ä–±—É–∑':    {'calories': 30, 'protein': 0.6, 'fat': 0.2, 'carbs': 8},
    '—Å–≤–∏–Ω–∏–Ω–∞':  {'calories': 300, 'protein': 25, 'fat': 20, 'carbs': 0},
    '—Å—É–ø':      {'calories': 30, 'protein': 2, 'fat': 1, 'carbs': 3},
}

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            targets TEXT
        )
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –µ–¥—ã
    c.execute('''
        CREATE TABLE IF NOT EXISTS food_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            food TEXT,
            qty REAL,
            unit TEXT,
            calories REAL,
            protein REAL,
            fat REAL,
            carbs REAL,
            date TEXT
        )
    ''')
    conn.commit()
    conn.close()


def get_user_targets(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT targets FROM users WHERE user_id=?', (user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return json.loads(row[0])
    else:
        return DEFAULT_TARGETS.copy()


def set_user_targets(user_id, targets_dict):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    targets_json = json.dumps(targets_dict)
    c.execute('REPLACE INTO users (user_id, targets) VALUES (?, ?)', (user_id, targets_json))
    conn.commit()
    conn.close()


def log_food(user_id, food, qty, diet_unit):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    nutrition = NUTRITION_DB.get(food)
    if not nutrition:
        return None
    multiplier = qty / 100 if diet_unit == 'g' else qty * 50 / 100  # 1 —à—Ç = 50 –≥
    calories = nutrition['calories'] * multiplier
    protein = nutrition['protein'] * multiplier
    fat = nutrition['fat'] * multiplier
    carbs = nutrition['carbs'] * multiplier
    date_str = date.today().isoformat()
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        INSERT INTO food_log (user_id, food, qty, unit, calories, protein, fat, carbs, date)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, food, qty, diet_unit, calories, protein, fat, carbs, date_str))
    conn.commit()
    conn.close()
    return calories, protein, fat, carbs


def get_daily_summary(user_id, date_str=None):
    if not date_str:
        date_str = date.today().isoformat()
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        SELECT SUM(calories), SUM(protein), SUM(fat), SUM(carbs)
        FROM food_log
        WHERE user_id=? AND date=?
    ''', (user_id, date_str))
    row = c.fetchone()
    conn.close()
    if row and row[0] is not None:
        return {
            'calories': row[0],
            'protein': row[1],
            'fat': row[2],
            'carbs': row[3]
        }
    else:
        return {'calories': 0, 'protein': 0, 'fat': 0, 'carbs': 0}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    init_db()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    get_user_targets(user.id)
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø FitoBob, —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç.\n" +
        "–Ø –ø–æ–º–æ–≥—É —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã.\n" +
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


def help_command(update: Update, context: CallbackContext):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ FitoBob:\n"
        "/log <–µ–¥–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <g|—à—Ç> - –¥–æ–±–∞–≤–∏—Ç—å –µ–¥—É. –ü—Ä–∏–º–µ—Ä: /log —è–π—Ü–æ 2 —à—Ç, /log —Ä–∏—Å 150 g\n"
        "/summary - –ø–æ–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Å—ä–µ–ª –∏ —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏\n"
        "/targets <–∫–∞–ª–æ—Ä–∏–∏> <–±–µ–ª–æ–∫> <–∂–∏—Ä—ã> <—É–≥–ª–∏> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–ª–∏\n"
        "/reset - –æ—á–∏—Å—Ç–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–æ–≥ (—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è)\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    update.message.reply_text(help_text)


def set_targets(update: Update, context: CallbackContext):
    user = update.effective_user
    try:
        args = context.args
        if len(args) != 4:
            raise ValueError
        cal, prot, fat, carbs = map(int, args)
        new_targets = {
            'calories': cal,
            'protein': prot,
            'fat': fat,
            'carbs': carbs
        }
        set_user_targets(user.id, new_targets)
        update.message.reply_text(f"–¶–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {cal} –∫–∫–∞–ª, {prot} –≥ –±–µ–ª–∫–∞, {fat} –≥ –∂–∏—Ä–∞, {carbs} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤.")
    except:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /targets <–∫–∞–ª–æ—Ä–∏–∏> <–±–µ–ª–æ–∫> <–∂–∏—Ä—ã> <—É–≥–ª–∏>")


def log_food_command(update: Update, context: CallbackContext):
    user = update.effective_user
    if len(context.args) < 3:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /log <–µ–¥–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <g|—à—Ç>. –ü—Ä–∏–º–µ—Ä: /log —è–π—Ü–æ 2 —à—Ç")
        return
    food = context.args[0].lower()
    try:
        qty = float(context.args[1])
    except:
        update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /log —Ä–∏—Å 150 g")
        return
    unit = context.args[2].lower()
    if food not in NUTRITION_DB:
        update.message.reply_text(f"–ù–µ –∑–Ω–∞—é –ø—Ä–æ–¥—É–∫—Ç '{food}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {', '.join(NUTRITION_DB.keys())}")
        return
    if unit not in ['g', '—à—Ç']:
        update.message.reply_text("–ï–¥–∏–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'g' –∏–ª–∏ '—à—Ç'. –ü—Ä–∏–º–µ—Ä: /log —è–π—Ü–æ 2 —à—Ç, /log —Ä–∏—Å 150 g")
        return
    result = log_food(user.id, food, qty, unit)
    if not result:
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –µ–¥–∏–Ω–∏—Ü—É.")
        return
    cals, prot, fat, carbs = result
    summary = get_daily_summary(user.id)
    targets = get_user_targets(user.id)
    reply = (
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {food} {int(qty)}{unit}\n"
        f"‚á® {int(cals)} –∫–∫–∞–ª, {int(prot)} –≥ –±–µ–ª–∫–∞, {int(fat)} –≥ –∂–∏—Ä–∞, {int(carbs)} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤.\n"
        f"–°–µ–≥–æ–¥–Ω—è: {int(summary['calories'])}/{targets['calories']} –∫–∫–∞–ª, "
        f"{int(summary['protein'])}/{targets['protein']} –≥ –±–µ–ª–∫–∞"
    )
    update.message.reply_text(reply)


def summary_command(update: Update, context: CallbackContext):
    user = update.effective_user
    summary = get_daily_summary(user.id)
    targets = get_user_targets(user.id)
    reply = (
        f"üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç ({date.today().isoformat()}):\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {int(summary['calories'])}/{targets['calories']}\n"
        f"–ë–µ–ª–æ–∫: {int(summary['protein'])}/{targets['protein']} –≥\n"
        f"–ñ–∏—Ä: {int(summary['fat'])}/{targets['fat']} –≥\n"
        f"–£–≥–ª–µ–≤–æ–¥—ã: {int(summary['carbs'])}/{targets['carbs']} –≥\n"
    )
    update.message.reply_text(reply)


def reset_command(update: Update, context: CallbackContext):
    user = update.effective_user
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    today = date.today().isoformat()
    c.execute('DELETE FROM food_log WHERE user_id=? AND date=?', (user.id, today))
    conn.commit()
    conn.close()
    update.message.reply_text("–õ–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—á–∏—â–µ–Ω.")


def unknown(update: Update, context: CallbackContext):
    update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /help.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

def main():
    init_db()
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("targets", set_targets))
    dp.add_handler(CommandHandler("log", log_food_command))
    dp.add_handler(CommandHandler("summary", summary_command))
    dp.add_handler(CommandHandler("reset", reset_command))
    dp.add_handler(MessageHandler(Filters.command, unknown))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
