import os
import logging
import sqlite3
import json
from datetime import date

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")
    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TELEGRAM_TOKEN –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

DB_PATH = 'fitobob.db'

# –°—É—Ç–æ—á–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_TARGETS = {
    'calories': 1800,
    'protein': 120,
    'fat': 50,
    'carbs': 100
}

# –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –≥)
NUTRITION_DB = {
    '—è–π—Ü–æ':     {'calories': 155, 'protein': 13,  'fat': 11,  'carbs': 1.1},
    '—Ä–∏—Å':      {'calories': 130, 'protein': 2.7, 'fat': 0.3, 'carbs': 28},
    '–∫—É—Ä–∏—Ü–∞':   {'calories': 165, 'protein': 31,  'fat': 3.6, 'carbs': 0},
    '–≥–æ–≤—è–¥–∏–Ω–∞': {'calories': 250, 'protein': 26,  'fat': 17,  'carbs': 0},
    '—è–±–ª–æ–∫–æ':   {'calories': 52,  'protein': 0.3, 'fat': 0.2, 'carbs': 14},
    '–±–∞–Ω–∞–Ω':    {'calories': 89,  'protein': 1.1, 'fat': 0.3, 'carbs': 23},
    '–±—Ä–æ–∫–∫–æ–ª–∏': {'calories': 55,  'protein': 3.7, 'fat': 0.6, 'carbs': 11},
    '–ª–æ—Å–æ—Å—å':   {'calories': 208, 'protein': 20,  'fat': 13,  'carbs': 0},
    '–º–∏–Ω–¥–∞–ª—å':  {'calories': 579, 'protein': 21,  'fat': 50,  'carbs': 22},
    '–ø—Ä–æ—Ç–µ–∏–Ω':  {'calories': 110, 'protein': 20,  'fat': 1,   'carbs': 3},
    '–ø–∞–Ω–µ–ª—å':   {'calories': 350, 'protein': 5,   'fat': 15,  'carbs': 50},
    '–∞—Ä–±—É–∑':    {'calories': 30,  'protein': 0.6, 'fat': 0.2, 'carbs': 8},
    '—Å–≤–∏–Ω–∏–Ω–∞':  {'calories': 300, 'protein': 25,  'fat': 20,  'carbs': 0},
    '—Å—É–ø':      {'calories': 30,  'protein': 2,   'fat': 1,   'carbs': 3},
}


# ------------------------------
#  –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î (SQLite)
# ------------------------------

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–¥ –∫–ª–∏–µ–Ω—Ç–∞ ‚Üí JSON —Ü–µ–ª–µ–π)
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            targets TEXT
        )
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –µ–¥—ã
    c.execute('''
        CREATE TABLE IF NOT EXISTS food_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            food TEXT,
            qty REAL,
            unit TEXT,
            calories REAL,
            protein REAL,
            fat REAL,
            carbs REAL,
            date TEXT
        )
    ''')
    conn.commit()
    conn.close()


def get_user_targets(user_id: int) -> dict:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT targets FROM users WHERE user_id=?', (user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return json.loads(row[0])
    else:
        return DEFAULT_TARGETS.copy()


def set_user_targets(user_id: int, targets_dict: dict) -> None:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    targets_json = json.dumps(targets_dict, ensure_ascii=False)
    c.execute(
        'REPLACE INTO users (user_id, targets) VALUES (?, ?)',
        (user_id, targets_json)
    )
    conn.commit()
    conn.close()


def log_food_to_db(user_id: int, food: str, qty: float, diet_unit: str):
    nutrition = NUTRITION_DB.get(food)
    if not nutrition:
        return None

    # –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü–∞ ¬´g¬ª ‚Üí –±–µ—Ä–µ–º qty –≥—Ä–∞–º–º, –µ—Å–ª–∏ ¬´—à—Ç¬ª ‚Üí —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ 1 —à—Ç = 50 –≥
    multiplier = (qty / 100) if (diet_unit == 'g') else (qty * 50 / 100)
    calories = nutrition['calories'] * multiplier
    protein  = nutrition['protein']  * multiplier
    fat      = nutrition['fat']      * multiplier
    carbs    = nutrition['carbs']    * multiplier
    date_str = date.today().isoformat()

    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        INSERT INTO food_log (user_id, food, qty, unit, calories, protein, fat, carbs, date)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, food, qty, diet_unit, calories, protein, fat, carbs, date_str))
    conn.commit()
    conn.close()
    return calories, protein, fat, carbs


def get_daily_summary(user_id: int, date_str: str = None) -> dict:
    if not date_str:
        date_str = date.today().isoformat()

    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        SELECT SUM(calories), SUM(protein), SUM(fat), SUM(carbs)
        FROM food_log
        WHERE user_id=? AND date=?
    ''', (user_id, date_str))
    row = c.fetchone()
    conn.close()

    if row and row[0] is not None:
        return {
            'calories': row[0],
            'protein':  row[1],
            'fat':      row[2],
            'carbs':    row[3]
        }
    else:
        return {'calories': 0, 'protein': 0, 'fat': 0, 'carbs': 0}


# --------------------------------
#  –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã (handlers)
# --------------------------------

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    init_db()
    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∑–∞–ø–∏—à–µ—Ç—Å—è DEFAULT_TARGETS
    get_user_targets(user.id)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø FitoBob, —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç.\n"
        "–Ø –ø–æ–º–æ–≥—É —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ FitoBob:\n"
        "/log <–µ–¥–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <g|—à—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –µ–¥—É.\n"
        "  –ü—Ä–∏–º–µ—Ä: /log —è–π—Ü–æ 2 —à—Ç\n"
        "           /log —Ä–∏—Å 150 g\n"
        "/summary ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Å—ä–µ–ª –∏ —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏\n"
        "/targets <–∫–∞–ª–æ—Ä–∏–∏> <–±–µ–ª–æ–∫> <–∂–∏—Ä—ã> <—É–≥–ª–∏> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–ª–∏\n"
        "/reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–æ–≥ (—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è)\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)


async def set_targets_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    args = context.args

    if len(args) != 4:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /targets <–∫–∞–ª–æ—Ä–∏–∏> <–±–µ–ª–æ–∫> <–∂–∏—Ä—ã> <—É–≥–ª–∏>")
        return

    try:
        cal, prot, fat, carbs = map(int, args)
    except ValueError:
        await update.message.reply_text("–í—Å–µ —á–µ—Ç—ã—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
        return

    new_targets = {
        'calories': cal,
        'protein':  prot,
        'fat':      fat,
        'carbs':    carbs
    }
    set_user_targets(user.id, new_targets)
    await update.message.reply_text(
        f"–¶–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {cal} –∫–∫–∞–ª, {prot}‚Äâ–≥ –±–µ–ª–∫–∞, {fat}‚Äâ–≥ –∂–∏—Ä–∞, {carbs}‚Äâ–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤."
    )


async def log_food_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    args = context.args

    if len(args) < 3:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /log <–µ–¥–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <g|—à—Ç>\n"
            "–ü—Ä–∏–º–µ—Ä: /log —è–π—Ü–æ 2 —à—Ç –∏–ª–∏ /log —Ä–∏—Å 150 g"
        )
        return

    food = args[0].lower()
    try:
        qty = float(args[1])
    except ValueError:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /log —Ä–∏—Å 150 g")
        return

    unit = args[2].lower()
    if food not in NUTRITION_DB:
        await update.message.reply_text(
            f"–ù–µ –∑–Ω–∞—é –ø—Ä–æ–¥—É–∫—Ç '{food}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(NUTRITION_DB.keys())}"
        )
        return

    if unit not in ('g', '—à—Ç'):
        await update.message.reply_text("–ï–¥–∏–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'g' –∏–ª–∏ '—à—Ç'. –ü—Ä–∏–º–µ—Ä: /log —è–π—Ü–æ 2 —à—Ç")
        return

    result = log_food_to_db(user.id, food, qty, unit)
    if not result:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –µ–¥–∏–Ω–∏—Ü—É.")
        return

    cals, prot, fat, carbs = result
    summary = get_daily_summary(user.id)
    targets = get_user_targets(user.id)

    reply = (
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {food} {int(qty)}{unit}\n"
        f"‚á® {int(cals)}‚Äâ–∫–∫–∞–ª, {int(prot)}‚Äâ–≥ –±–µ–ª–∫–∞, {int(fat)}‚Äâ–≥ –∂–∏—Ä–∞, {int(carbs)}‚Äâ–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤.\n\n"
        f"–°–µ–≥–æ–¥–Ω—è: {int(summary['calories'])}/{targets['calories']}‚Äâ–∫–∫–∞–ª, "
        f"{int(summary['protein'])}/{targets['protein']}‚Äâ–≥ –±–µ–ª–∫–∞\n"
        f"–ñ–∏—Ä: {int(summary['fat'])}/{targets['fat']}‚Äâ–≥, "
        f"–£–≥–ª–µ–≤–æ–¥—ã: {int(summary['carbs'])}/{targets['carbs']}‚Äâ–≥"
    )
    await update.message.reply_text(reply)


async def summary_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    summary = get_daily_summary(user.id)
    targets = get_user_targets(user.id)

    reply = (
        f"üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç ({date.today().isoformat()}):\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {int(summary['calories'])}/{targets['calories']}\n"
        f"–ë–µ–ª–æ–∫: {int(summary['protein'])}/{targets['protein']}‚Äâ–≥\n"
        f"–ñ–∏—Ä: {int(summary['fat'])}/{targets['fat']}‚Äâ–≥\n"
        f"–£–≥–ª–µ–≤–æ–¥—ã: {int(summary['carbs'])}/{targets['carbs']}‚Äâ–≥"
    )
    await update.message.reply_text(reply)


async def reset_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    today = date.today().isoformat()
    c.execute('DELETE FROM food_log WHERE user_id=? AND date=?', (user.id, today))
    conn.commit()
    conn.close()
    await update.message.reply_text("–õ–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—á–∏—â–µ–Ω.")


async def unknown_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /help.")


# ---------------------------
#  –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ main
# ---------------------------

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
    application.add_handler(CommandHandler("start", start_handler))
    application.add_handler(CommandHandler("help", help_handler))
    application.add_handler(CommandHandler("targets", set_targets_handler))
    application.add_handler(CommandHandler("log", log_food_handler))
    application.add_handler(CommandHandler("summary", summary_handler))
    application.add_handler(CommandHandler("reset", reset_handler))

    application.add_handler(
        MessageHandler(filters.COMMAND, unknown_handler)
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ (–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
    application.run_polling()


if __name__ == "__main__":
    main()
